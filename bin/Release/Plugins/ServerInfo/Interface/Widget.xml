<frame posn="135 82.5 0" id="[total]">

  <quad posn="20 -10" sizen="8 8" halign="center" valign="center" scriptevents="1" id="[help]hover" style="UIConstruction_Buttons" substyle="Help" />
  <frame id="[help]toshow" hidden="1">
    <quad posn="0 -25 -1" halign="center" valign="center" bgcolor="000" opacity="0.825" sizen="45 20"/>
    <quad posn="0 -22.5 1" halign="center" valign="center" sizen="40 0.5" bgcolor="fff"/>

    <label posn="-20 -20" halign="left" sizen="40 5" textsize="1" valign="center" text="MapInformation$t By Guerro" style="TextButtonBig"/>

    <label posn="0 -28" sizen="35 20" halign="center" valign="center" textsize="0.9" text="This plugin is usefull to show the current map, the maplist and mania-exchange maplist" autonewline="1" style="TextButtonBig"/>
  </frame>
  <quad sizen="50 15" halign="center" valign="center" style="Bgs1InRace" bgcolor="000" substyle="Shadow" />
  <quad sizen="25 12" halign="left" valign="center" id="[2]hover_info" scriptevents="true" bgcolor="000" opacity="0"/>
  <quad sizen="25 12" halign="right" valign="center" id="[1]hover_info" scriptevents="true" bgcolor="000" opacity="0"/>

  

  <frame posn="0 0 15" id="[infoandmx]boxlimit">
    <frame id="[info]name">
      <label posn="21 2 1" sizen="37.5 8" halign="right" valign="center" style="TextButtonBig" textsize="1.25" text="MapName"/>
      <label posn="21 -2 1" sizen="37.5 8" halign="right" valign="center" style="TextButtonBig" textsize="1.25" text="BY MapAuthor"/>

      <quad posn="-21.75 2 1" halign="left" valign="center" sizen="4.75 4.75" style="UIConstruction_Buttons" substyle="Stats"/>
      <quad posn="-21.75 -2 1" halign="left" valign="center" sizen="4.75 4.75" style="UIConstruction_Buttons" substyle="ActionMaker"/>
    </frame>
    <frame posn="0 0 1" id="[infoandmx]anim_toshow">
      <quad sizen="47 12" halign="center" valign="center" bgcolor="000" opacity="0.75"/>
      <quad posn="-12 0 1" sizen="10 10" halign="center" valign="center" id="[1]info" style="Icons128x32_1" substyle="Windowed" opacity="1"/>
      <quad posn="12 0 1" sizen="10 10" halign="center" valign="center" id="[2]info" image="http://www.mania-exchange.com/Content/images/planet_mx_logo.png" opacity="1"/>
      <quad posn="0 0 1" sizen="1.75 10" halign="center" valign="center" style="Bgs1InRace" substyle="Glow" opacity="1"/>
    </frame>
  </frame>

  <frame posn="0 0 15" id="[infoandmx]limit_toshow">
    <frame posn="0 -42.5 0" id="[infoandmx]click_toshow" scale="0.9">
      <frame id="[infoandmx]scale" scale="0">
        <quad sizen="60.75 85.75" halign="center" valign="center" style="Bgs1InRace" bgcolor="000" substyle="BgButtonShadow" />
        <quad sizen="50 75" halign="center" valign="center" bgcolor="000" opacity="0.8" />
        <frame id="[mx]homeframe" posn="0 27.5 10">
          <quad posn="-13 0 2" sizen="15 15" bgcolor="FFFA" style="UIConstruction_Buttons" substyle="GhostBlocks" halign="center" valign="center"/>
          <quad posn="-13 -20.5 2" sizen="15 15" bgcolor="FFFA" style="UIConstruction_Buttons" substyle="ScriptEditor" halign="center" valign="center"/>
          <label posn="9 0 2" sizen="30 20"  style="TextButtonBig" text="$fffSEARCH" valign="center2" halign="center"/>
          <label posn="9 -20.5 2" sizen="30 20"  style="TextButtonBig" text="$fffALL MAPS" valign="center2" halign="center"/>
          <quad posn="0 0 1" sizen="50 20" bgcolor="FFFA" halign="center" valign="center"/>
          <quad posn="0 -20.5 1" sizen="50 20" scriptevents="1" id="ShowFullListMX" bgcolor="8C8C8CAA" halign="center" valign="center"/>
          <quad sizen="60.75 85.75" halign="center" valign="center" style="Bgs1InRace" bgcolor="000" substyle="BgButtonShadow"  posn="0 -29.5"/>
          <quad sizen="50 75" halign="center" valign="center" bgcolor="000" opacity="0.8"  posn="0 -29.5 0.5" style="Bgs1" substyle="BgGradBottom"/>
          <quad sizen="50 75" halign="center" valign="center" bgcolor="000" opacity="0.8"  posn="0 -29.5"/>
        </frame>
        <frame id="[mx]limit_list">
          <frame id="[mx]list" posn="0 31.75" hidden="1">
            <!-- MX_LIST -->
            <frame id="bottomheader" posn="0 -60">
              <quad posn="0 0 15" sizen="50 22.5" halign="center" valign="center" style="Bgs1InRace" substyle="BgGradBottom"/>
              <quad posn="0 -5 16" sizen="50 17.5" halign="center" valign="center" style="Bgs1InRace" substyle="BgGradBottom"/>
              <quad posn="0 -5 16" sizen="50 17.5" halign="center" valign="center" style="Bgs1InRace" substyle="BgGradBottom"/>
              <quad posn="-15 -8 20" sizen="8 8" halign="center" valign="bottom" colorize="f89" id="CloseListMX" scriptevents="1" style="UIConstruction_Buttons" substyle="Left"/>
              <quad posn="5 -8 20" sizen="8 8" halign="center" colorize="9f9" valign="bottom" scriptevents="1" style="UIConstruction_Buttons" substyle="Down"/>
              <quad posn="15 -8 20" sizen="8 8" halign="center" colorize="9f9" valign="bottom" scriptevents="1" style="UIConstruction_Buttons" substyle="Up"/>
            </frame>
          </frame>
        </frame>
        <frame id="[info]mapinfo" hidden="1">
          <quad sizen="50 20" posn="0 28.5 1" halign="center" valign="center" image="Picture?.jpg"/>
          <label posn="0 15 2" halign="center" valign="center" text="$s75%"/>
          <quad posn="0 15 1" halign="center" valign="center" sizen="15 12" style="Bgs1" substyle="BgShadow" />
          <quad sizen="50 7.5 0" posn="0 15" halign="center" valign="center" bgcolor="999"/>
          <quad sizen="37.5 7.5" posn="-25 15 0.5" halign="left" valign="center" bgcolor="8F0"/>

          <quad sizen="45 10" halign="center" valign="center" style="Bgs1InRace" substyle="BgHealthBar" />

          <label sizen="30 5" posn="0 8" style="TextButtonBig" halign="center" valign="center" textsize="1" text="ON MX :"/>
          <frame name="award" posn="0">
            <quad sizen="6.75 6.75" posn="-15" halign="center" valign="center" style="Icons128x32_1" substyle="RT_Cup" colorize="f75" />
            <label sizen="30 5" posn="-7" style="TextButtonBig" halign="left" valign="center" textprefix="$f75" text="$f750 AWARDS"/>
          </frame>
        </frame>
      </frame>
    </frame>
  </frame>
</frame>

<script>
      <!--
  #Include "AnimLib" as AL
  
  #Const C_MI_FrameAnimTime 250
  #Const C_MI_T_FrameAnimTime 400
  #Const C_MI_FrameAnim 20
  #Const C_MI_FrameAnimToWait 100
  
  ***HoverAnimation_InfoAndMX***
  ***
      if (MI_IsHover_InfoAndMX)
      {
        if (!MI_SwitchHover_InfoAndMX)
        {
          MI_SwitchHover_InfoAndMX = True;
          MI_LastHover_InfoAndMX = Now + C_MI_FrameAnimToWait;
        }
        MI_Transition_InfoAndMX = AL::EaseInSine(Now - MI_LastHover_InfoAndMX, 0., 1., C_MI_FrameAnimTime);
        MI_InfoAndMX_Frame.RelativePosition[1] = 40 - C_MI_FrameAnim - MI_Transition_InfoAndMX * C_MI_FrameAnim;
        MI_InfoMap_Frame.RelativePosition[1] = 20 - C_MI_FrameAnim - MI_Transition_InfoAndMX * C_MI_FrameAnim;
      }
      else
      {
        if (MI_SwitchHover_InfoAndMX)
        {
          MI_SwitchHover_InfoAndMX = False;
          MI_LastHover_InfoAndMX = Now + C_MI_FrameAnimToWait;
        }
        MI_Transition_InfoAndMX = AL::EaseInSine(Now - MI_LastHover_InfoAndMX, 1., -1., C_MI_FrameAnimTime);
        MI_InfoAndMX_Frame.RelativePosition[1] = 40 - C_MI_FrameAnim - MI_Transition_InfoAndMX * C_MI_FrameAnim;
        MI_InfoMap_Frame.RelativePosition[1] = 20 - C_MI_FrameAnim - MI_Transition_InfoAndMX * C_MI_FrameAnim;
      }
  ***
  
  ***ClickAnimation_ShowMapInfo***
  ***
      if (MI_IsClick_InfoAndMX)
      {
        if (!MI_SwitchClick_InfoAndMX)
        {
          MI_SwitchClick_InfoAndMX = True;
          MI_LastClick_InfoAndMX = Now + C_MI_FrameAnimToWait;
        }
        MI_Transition_ClickInfoAndMX = AL::EaseInSine(Now - MI_LastClick_InfoAndMX, -3., 4., C_MI_FrameAnimTime);
        MI_Transition_Scale = AL::EaseOutElastic(Now - MI_LastClick_InfoAndMX, 0., 1., C_MI_FrameAnimTime*3);
        MI_boxIAM_Frame.RelativePosition[1] = -2 - C_MI_FrameAnim - MI_Transition_ClickInfoAndMX * C_MI_FrameAnim;
        MI_boxIAM_ScaleFrame.RelativeScale = MI_Transition_Scale;
      }
      else
      {
        if (MI_SwitchClick_InfoAndMX)
        {
          MI_SwitchClick_InfoAndMX = False;
          MI_LastClick_InfoAndMX = Now + C_MI_FrameAnimToWait;
        }
        MI_Transition_ClickInfoAndMX = AL::EaseInSine(Now - MI_LastClick_InfoAndMX, 1., -4., C_MI_FrameAnimTime);
         MI_Transition_Scale = AL::EaseOutElastic(Now - MI_LastClick_InfoAndMX, 1., -1., C_MI_FrameAnimTime*3);
        MI_boxIAM_Frame.RelativePosition[1] = -2 - C_MI_FrameAnim - MI_Transition_ClickInfoAndMX * C_MI_FrameAnim;
        MI_boxIAM_ScaleFrame.RelativeScale = MI_Transition_Scale;
      }
  ***
  
  ***EndRoundAnimation_MapInfo***
  ***
      if (UI.UISequence != CUIConfig::EUISequence::EndRound)
      {
        if (!MI_Switch_EndRound)
        {
          MI_Switch_EndRound = True;
          MI_Last_EndRound = Now + C_MI_FrameAnimToWait;
        }
        MI_Transition_EndRound = AL::EaseInSine(Now - MI_Last_EndRound, -2., 3., C_MI_T_FrameAnimTime);
        MI_TotalFrame.RelativePosition[0] = 175 - C_MI_FrameAnim - MI_Transition_EndRound * C_MI_FrameAnim;
      }
      else
      {
        if (MI_Switch_EndRound)
        {
          MI_Switch_EndRound = False;
          MI_Last_EndRound = Now + C_MI_FrameAnimToWait;
        }
        MI_Transition_EndRound = AL::EaseInSine(Now - MI_Last_EndRound, 1., -3., C_MI_T_FrameAnimTime);
        MI_TotalFrame.RelativePosition[0] = 175 - C_MI_FrameAnim - MI_Transition_EndRound * C_MI_FrameAnim;
      }
  ***
  
  main() {
    declare CMlFrame  MI_TotalFrame          = (Page.GetFirstChild("[total]") as CMlFrame);
    
    declare CMlFrame  MI_boxIAM_ScaleFrame   = (Page.GetFirstChild("[infoandmx]scale") as CMlFrame);
    declare CMlFrame  MI_boxIAM_Frame        = (Page.GetFirstChild("[infoandmx]click_toshow") as CMlFrame);
    declare CMlFrame  MI_boxIAM_LimitFrame   = (Page.GetFirstChild("[infoandmx]limit_toshow") as CMlFrame);
  
    declare CMlFrame  MI_InfoAndMX_Frame     = (Page.GetFirstChild("[infoandmx]anim_toshow") as CMlFrame);
    declare CMlFrame  MI_InfoAndMX_LimitFrame= (Page.GetFirstChild("[infoandmx]boxlimit") as CMlFrame);
    declare CMlFrame  MI_InfoMap_Frame       = (Page.GetFirstChild("[info]name") as CMlFrame);
    declare CMlQuad   MI_HoverInfo_Quad      = (Page.GetFirstChild("[1]hover_info") as CMlQuad);
    declare CMlQuad   MI_HoverMX_Quad        = (Page.GetFirstChild("[2]hover_info") as CMlQuad);
    
    declare CMlQuad   MI_ShowFullListMX_Quad = (Page.GetFirstChild("ShowFullListMX") as CMlQuad);
    
    declare CMlQuad   MI_Info_Quad           = (Page.GetFirstChild("[1]info") as CMlQuad);
    declare CMlQuad   MI_MX_Quad             = (Page.GetFirstChild("[2]info") as CMlQuad);
    
    declare CMlFrame  MI_MX_HomeFrame        = (Page.GetFirstChild("[mx]homeframe") as CMlFrame);
    declare CMlFrame  MI_MX_ListFrame        = (Page.GetFirstChild("[mx]list") as CMlFrame);
    declare CMlFrame  MI_MX_LimitListFrame   = (Page.GetFirstChild("[mx]limit_list") as CMlFrame);
    
    declare CMlFrame  MI_Info_ListFrame      = (Page.GetFirstChild("[info]mapinfo") as CMlFrame);
    
    declare Boolean MI_IsHover_InfoAndMX         for LocalUser = False;
    declare Boolean MI_SwitchHover_InfoAndMX     for LocalUser = False;
    declare Integer MI_LastHover_InfoAndMX       for LocalUser = Now;
    
    declare Boolean MI_IsClick_InfoAndMX         for LocalUser = False;
    declare Boolean MI_SwitchClick_InfoAndMX     for LocalUser = False;
    declare Integer MI_LastClick_InfoAndMX       for LocalUser = Now;
    
    declare Boolean MI_Switch_EndRound           for LocalUser = False;
    declare Integer MI_Last_EndRound             for LocalUser = Now;
    
    declare Real MI_Transition_InfoAndMX         for LocalUser = 0.;
    declare Real MI_Transition_ClickInfoAndMX    for LocalUser = 0.;
    declare Real MI_Transition_EndRound          for LocalUser = 0.;
    declare Real MI_Transition_Scale             for LocalUser = 0.;
    
    declare CMlFrame HelpFrame              = (Page.GetFirstChild("[help]toshow") as CMlFrame);
    declare Boolean HelpHovering for This = False;
    
    declare Boolean MXorInfo for LocalUser = False;
    declare Boolean ShowAllMXMaps for LocalUser = False;
    
    MI_Info_ListFrame.Hide();
    MI_MX_ListFrame.Hide();
    MI_MX_HomeFrame.Hide();
    
    MI_InfoAndMX_LimitFrame.ClipWindowActive = True;
		MI_InfoAndMX_LimitFrame.ClipWindowRelativePosition = <0., 0.>;
		MI_InfoAndMX_LimitFrame.ClipWindowSize = <50., 11.>;
    
    MI_boxIAM_LimitFrame.ClipWindowActive = True;
		MI_boxIAM_LimitFrame.ClipWindowRelativePosition = <0., -42.5>;
		MI_boxIAM_LimitFrame.ClipWindowSize = <75., 72.5>;
    
    MI_MX_LimitListFrame.ClipWindowActive = True;
		MI_MX_LimitListFrame.ClipWindowRelativePosition = <0., 0.>;
		MI_MX_LimitListFrame.ClipWindowSize = <75., 74.5>;
    
    while(True)
    {
      foreach (Event in PendingEvents)
      {
        if (Event.Type == CMlEvent::Type::MouseOver)
        {
          if (Event.ControlId == "[1]hover_info" || Event.ControlId == "[2]hover_info")
          {
            MI_IsHover_InfoAndMX = True;
          }
          if (Event.ControlId == "[1]hover_info")
          {
            MI_Info_Quad.Opacity = 1.;
            MI_MX_Quad.Opacity = 0.5;
          }
          if (Event.ControlId == "[2]hover_info")
          {
            MI_Info_Quad.Opacity = 0.5;
            MI_MX_Quad.Opacity = 1.;
          }
          if (Event.ControlId == "[help]hover")
          {
            HelpHovering = True;
          }
        }
        else if (Event.Type == CMlEvent::Type::MouseOut)
        {
          if (Event.ControlId == "[1]hover_info" || Event.ControlId == "[2]hover_info")
          {
            MI_IsHover_InfoAndMX = False;
          }
          if (Event.ControlId == "[help]hover")
          {
            HelpHovering = False;
          }
        } 
        else if (Event.Type == CMlEvent::Type::MouseClick)
        {
          if (Event.ControlId == "[1]hover_info")
          {
          if (MI_IsClick_InfoAndMX && MXorInfo) MI_IsClick_InfoAndMX = False;
            else MI_IsClick_InfoAndMX = True;
            MXorInfo = True;
          }
          if (Event.ControlId == "[2]hover_info")
          {
            if (MI_IsClick_InfoAndMX && !MXorInfo) MI_IsClick_InfoAndMX = False;
            else MI_IsClick_InfoAndMX = True;
            MXorInfo = False;
          }
          if (Event.ControlId == "ShowFullListMX")
          {
            ShowAllMXMaps = !ShowAllMXMaps;
          }
          if (Event.ControlId == "CloseListMX")
          {
            ShowAllMXMaps = False;
          }
        }
      }
      
      if (MXorInfo) 
      {
        MI_Info_ListFrame.Show();
        MI_MX_HomeFrame.Hide();
        MI_MX_ListFrame.Hide();
        ShowAllMXMaps = False;
      }
      else
      {
        MI_Info_ListFrame.Hide();
        MI_MX_HomeFrame.Show();
      }
      
      if (ShowAllMXMaps && !MXorInfo)
      {
        MI_MX_HomeFrame.Hide();
        MI_MX_ListFrame.Show();
      }
      else if (!MXorInfo)
      {
        MI_MX_HomeFrame.Show();
        MI_MX_ListFrame.Hide();
      }
      
      if (HelpHovering) HelpFrame.Show();
      else HelpFrame.Hide();
      
      +++HoverAnimation_InfoAndMX+++
      
      +++EndRoundAnimation_MapInfo+++
      
      +++ClickAnimation_ShowMapInfo+++
      
      yield;
    }
  }
--></script>
